package de.b4sh.nerus.lib.generator;

import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * RandomByteArrayGenerator implements the IByteArrayGenerator interface and provides the functionality for a random
 * generated byte array.
 *
 * @author deB4SH
 * @see de.b4sh.nerus.lib.generator.IByteArrayGenerator
 * @since 0.0.1
 */
public final class RandomByteArrayGenerator implements IByteArrayGenerator {

    private static final Logger log = Logger.getLogger(RandomByteArrayGenerator.class.getName());
    private final Random random;

    /**
     * Constructor for RandomByteArrayGenerator.
     */
    public RandomByteArrayGenerator() {
        this.random = new Random();
    }

    @Override
    public byte[] generateArray(final int length) {
        if (length == 0) {
            RandomByteArrayGenerator.log.log(Level.INFO, "A length of zero is not valid for the generateArray " +
                    "function.");
            return null;
        }
        final byte[] array = new byte[length];
        this.random.nextBytes(array);
        return array;
    }

    @Override
    public byte[] generateArray() {
        return this.generateArray(1024);
    }
}
